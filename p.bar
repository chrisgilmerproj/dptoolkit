#! /usr/bin/env ppython

import sys
import os
from pylab import arange,bar,show,xticks,gca,xlabel,ylabel,title,grid,gcf,text,axis
import optparse
import re


#--- set up to handle command line arguments
description="Make a bar chart from stdin. Input columns are defined as follows: "
description += "col0=barLabel; col1=barHeight; col2=barBottom(optional); "
description += "col3=colColor(optional)"
usage = "%prog [optional args]"
p = optparse.OptionParser(usage,description=description)
p.add_option('-y','--yLimits',action='store',type='string',
                                               dest='ylim', metavar="ymin:ymax")
p.add_option('-c','--color',action='store',type='string',
                                        dest='color', metavar="'b'",default='b',
                                                      help = "global bar color")
p.add_option('-w','--barWidth',action='store',type='float',
                                   dest='barWidth', metavar=".75",default='.75',
                                              help="fraction of bar separation")
p.add_option('-m','--margin',action='store',type='float',
                                   dest='margin', metavar="0.0",default='0.0',
                        help="left/right margins in fraction of bar separation")
p.add_option('-A','--annotate',action='store_true', default=False,
                                      dest='annotate', help='Annotate the bars')
p.add_option('--annotatePad',action='store', dest='annotatePad',type=float,
                                                   default=.015, metavar=".015",
                       help = "Fraction of yAxis to use in padding annotations")
p.add_option('--annotateFormat',action='store', dest='annotateFormat',type='string',
                                                   default="%0.2g", metavar="%0.2g",
                                     help = "Format string for bar annotations")

p.add_option('-l','--lineWidth',action='store',type='float',
                                      dest='lineWidth', metavar="1",default='1')
p.add_option('-r','--xTickRotation',action='store',type='string',
                                       dest='rotation', metavar="0",default='0',
                         help="rotate the xTick Labels by this angle (degrees)")
p.add_option('-f','--fontSize',action='store',type='int',
                                                   dest='fontSize',default=None)
p.add_option('--xlabel',action='store',type='string',
                             dest='xlabel', metavar="'x label text'",default='')
p.add_option('--ylabel',action='store',type='string',
                             dest='ylabel', metavar="'y label text'",default='')
p.add_option('--title',action='store',type='string',
                                dest='title', metavar="'title text'",default='')
p.add_option('-g','--grid',action='store_true', default=False,
                                            dest='grid', help='show grid lines')
p.add_option('--ylog',action='store_true', default=False,
                                         dest='ylog', help='make y a log scale')
p.add_option('-s','--save',action='store',type='string',
                                            dest='fileName', metavar="fileName")
p.add_option('-q','--quiet',action='store_true', default=False,
                   dest='quiet', help='Quiet. (For saing without drawing plot)')
p.add_option('--page',action='store',
              dest='page',choices=['portrait','landscape','slideFull','slideHalf','slideBumper'],
     help = "turn on figure formatting. presets are: portrait|landscape|slideFull|slideHalf|slideBumper")
p.add_option('--marginTop',action='store', dest='marginTop',type=float,
                  default=.1,  metavar="0.1",help = "top margin (fig fraction)")
p.add_option('--marginBottom',action='store', dest='marginBottom',type=float,
                 default=.1,metavar="0.1",help = "bottom margin (fig fraction)")

p.add_option('--marginLeft',action='store', dest='marginLeft',type=float,
                 default=.12,metavar="0.12",help = "left margin (fig fraction)")
p.add_option('--marginRight',action='store', dest='marginRight',type=float,
                default=.08, metavar=".08",help = "right margin (fig fraction)")

p.add_option('--sizeTitle',action='store', dest='sizeTitle',type=float,default=18,
                                          metavar="18",help = "title font size")
p.add_option('--sizeLabel',action='store', dest='sizeLabel',type=float,default=16,
                                          metavar="16",help = "label font size")
p.add_option('--sizeNumber',action='store', dest='sizeNumbers',type=float,default=14,
                                          metavar="14",help = "label font size")
p.add_option('--lineWidthEdge',action='store', dest='lineWidthEdge',type=float,default=2,
                                          metavar="2",help = "label font size")
p.add_option('--markerSize',action='store', dest='markerSize',type=float,default=7,
                                          metavar="7",help = "label font size")
p.add_option('--dpi',action='store', dest='dpi',type='int',default=300,
                                             metavar="300",help = "savefig dpi")




#--- parse the input arguments
options,arguments=p.parse_args()

doFormatting = False
if not options.page == None:
   doFormatting = True

#--- set any formatting instructions
if doFormatting:
   from matplotlib import rcParams
   
   #for p in sorted(rcParams.keys()):
   #   print p
   #sys.exit()
   #
   rcParams['font.weight'] = 300 # (val = 100 to 900)
   rcParams['font.size'] = 14 # (val = 100 to 900)
   
   
   rcParams['axes.titlesize'] = options.sizeTitle
   rcParams['axes.labelsize'] = options.sizeLabel
   rcParams['axes.linewidth'] = options.lineWidthEdge
   
   rcParams['xtick.labelsize'] = options.sizeNumbers
   rcParams['ytick.labelsize'] = options.sizeNumbers
   rcParams["xtick.major.size"] = 7
   rcParams["ytick.major.size"] = 7
   rcParams['xtick.major.pad'] = 6
   rcParams['ytick.major.pad'] = 6
   
   
   rcParams['lines.linewidth'] = options.lineWidth #plot lineWidths
   rcParams['lines.markersize'] = options.markerSize #plot marker sizes
   
   if options.page == "portrait":
      rcParams["figure.figsize"] = [8.5,11] #portrait
   elif options.page == "slideFull":
      rcParams["figure.figsize"] = [8.8,5.9] #single power point graph
      #options.marginLeft = .08
      #options.marginRight = .03
      #options.marginTop = .06
   elif options.page == "slideHalf":
      rcParams["figure.figsize"] = [4.8,5.7] #one of two side-by-side power point graphs
      #options.marginLeft = .14
      #options.marginRight = .04
      #options.marginTop = .06
   elif options.page == "slideBumper":
      rcParams["figure.figsize"] = [8.8,4.9] #single power point graph
      #options.marginLeft = .08
      #options.marginRight = .03
      #options.marginTop = .08
      #options.marginBottom = .12
   else:
      rcParams["figure.figsize"] = [11,8.5] #default to landscape
   
   if not options.marginTop == None:
      rcParams["figure.subplot.top"] = 1 - options.marginTop
   if not options.marginBottom == None:
      rcParams["figure.subplot.bottom"] = options.marginBottom
   if not options.marginLeft == None:
      rcParams["figure.subplot.left"] = options.marginLeft
   if not options.marginRight == None:
      rcParams["figure.subplot.right"] = 1 - options.marginRight
      
   
   
   rcParams["figure.dpi"] = 80
   rcParams["savefig.dpi"] = 80





#--- set default bar appearance
barWidth = options.barWidth
lineWidth = options.lineWidth
color = options.color
bottom = 0



labelList = []
heightList = []
bottomList = []
colorList = []

#--- parse the input
for line in sys.stdin:
   words = line.split()
   if len(words) == 2:
      labelList.append(words[0])
      heightList.append(float(words[1]))
   elif len(words) == 3:
      labelList.append(words[0])
      heightList.append(float(words[1]))
      bottomList.append(float(words[2]))
   elif len(words) == 4:
      labelList.append(words[0])
      heightList.append(float(words[1]))
      bottomList.append(float(words[2]))
      colorList.append(words[3])



#--- define the bar centers
centers = arange(1,len(labelList)+1) 


height = heightList
if len(bottomList) == len(heightList):
   bottom = bottomList
if len(colorList) == len(heightList):
   color = colorList
if len(bottomList) == len(heightList):
   bar(left=centers,height=heightList,width=barWidth,bottom=bottomList,color=color,linewidth=lineWidth)



bar(left=centers,height=height,width=barWidth,bottom=bottom,color=color,linewidth=lineWidth)



#if len(bottomList) == len(heightList):
#   bar(left=centers,height=heightList,width=barWidth,bottom=bottomList,color=color,linewidth=lineWidth)
#else:
#   bar(left=centers,height=heightList,width=barWidth,color=color,linewidth=lineWidth)



xticks(centers+barWidth/2,labelList)





#--- add labels and titles
xlabel(options.xlabel)
ylabel(options.ylabel)
title(options.title)

#--- set any requested log scaling
if options.ylog:
   gca().set_yscale('log')

#--- if annotation desired, do it
if options.annotate:
   #--- get the max/min y axis for determing annotation offsets
   xmin,xmax,ymin,ymax = axis()
   
   #--- get the annotation params
   offset = options.annotatePad * (ymax-ymin)
   formatString = options.annotateFormat
   
   #--- set default scale to 1
   scale = 1
   
   #--- make a colorList if it doesn't exist
   if not colorList:
      colorList = [options.color for cc in centers]
   
   #--- loop over all the bars and annotate them
   for index,t in enumerate(zip(centers,heightList)):
      x,y = t
      exec  """s = "%s" %% y""" % (formatString)
      if options.ylog:
         scale = y/ymax
      text(x,y+offset*scale,s,color=colorList[index])

#--- set any requested axis limits
for limString in ['ylim']:
   exec 'lim = options.%s' % limString
   if not lim == None:
      exec "m = re.match('^(\S+):(\S+)$',options.%s)" % limString
      if m:
         limRange = float(m.group(1)),float(m.group(2))
         exec 'gca().set_%s(limRange)' % (limString)

#--- explicitly set any margins
xMinVal = 1 - options.margin
xMaxVal = len(centers) + barWidth + options.margin
gca().set_xlim((xMinVal,xMaxVal))

#--- show grid lines if requested
if options.grid:
   grid(True)

gca().set_xticklabels(labelList,rotation=options.rotation,fontsize=options.fontSize)


#--- save the file if requested
if not options.fileName == None:
   gcf().savefig(options.fileName)
   gcf().savefig(options.fileName,dpi=options.dpi)   
#--- plot if requested
if not options.quiet:
   show()



























#gca().set_xticklabels(labelList,rotation=60,fontsize=None)
#xlabel('GPS Number')
#ylabel('Residual (cm)')
#title('Residuals by GPS Transmitter')
#
#
#
#
#show()
